{
  "chunks": [
    "병렬 분산처리 시스템 라이브러리 구축 \n최종 보고 \n사업 개요\n1.1 사업 명\n1.2 사업 목적\n1.3 사업 목표\n병렬 분산처리 라이브러리 전체 시스템 구성도\n병렬 분산처리 라이브러리 시스템 구축\n3.1 병렬 라이브러리 구축\n3.2 클러스터 시스템 구축\n3.3 개발 환경 구축\n데모 시나리오  모듈 개발 워크플로우\n목차",
    "1. 사업 개요\n1.1 사업 명 \n매니코어 기반 고성능 컴퓨터 자원을 활용한 병렬 분산 처리 시스템 라이브러리 구축\n1.2 사업 목적\n매니코어 기반 고성능 컴퓨터 자원 활용\n병렬 분산처리 라이브러리 구축\n분석 알고리즘의 검증 및 결과 산출\n1.3 사업 목표\n바이오 빅 데이터 분석 과정의 효율성 향상 및 산출물 관리\n고성능 컴퓨터 자원 활용의 극대화 및 응용 수행에 적합한 솔루션 제공",
    "2. 병렬 분산처리 라이브러리 전체 시스템 구성도\n하이브리드 고성능 컴퓨팅 활용을 위한 ALLSO 소프트웨어 컨테이너 제작 시스템 구성도",
    "3. 병렬 분산처리 라이브러리 시스템 구축\n3.1 병렬 라이브러리 구축\n3.1.1. 병렬 라이브러리 구축 시스템 구성도\n3.1.2. 병렬 라이브러리 구축 완료\n3.1.3. 분산응용 제어 미들웨어 구현 완료\n3.2 클러스터 시스템 구축\n3.2.1. 클러스터 시스템 구성도 \n3.2.2. 분산 응용 이미지 버전 관리 구축 완료\n3.2.3. 분산 응용 디버깅 환경 구축 완료\n3.2.4. 사용자 관리 구현 완료\n3.2.5. 작업 상태 및 정보 데이터베이스 구축 완료\n3.3 분산응용 개발 환경 구축\n3.3.1 분산 응용 시스템 구성도\n3.3.2. 고성능 컴퓨팅 시스템 제어를 위한 백엔드 API 서버 구축 완료\n3.3.3 분산 응용 디버깅 메시지 인터페이스 미들웨어 구현 완료\n3.3.4 분산 응용 개발 페이지 구현 완료",
    "병렬 라이브러리 구축 시스템 구성도\n병렬분산처리 라이브러 시스템\n병렬분산처리 라이브러리\n클러스터 시스템\n병렬 라이브러리 구축\n고성능 컴퓨터 병렬응용 작업 수행 인터페이스 구축\n분산 응용 소스 버전관리\n분산 응용 이미지 버전관리\n분산응용 개발환경\n분산 응용 디버깅 및 개발 인터페이스 구축\n분산 응용 상태 관리\nJobmanager",
    "3.1 병렬 라이브러리 구축\n3.1.2. 병렬 라이브러리 구축 완료\nOpenPBS (Open Portable Batch System)\n작업 할당 및 자원 관리를 위한 오픈 OpenPBS 라이브러리 구축 완료\n병렬 작업 스케줄링\nOpenPBS를 사용하여 병렬 작업을 효율적으로 스케줄링 가능\n고성능 인프라의 사용 가능한 자원을 최적으로 활용 가능\n고성능 인프라의 사용 가능한 작업을 분산 실행 가능\n자원 관리\n고성능 인프라의 자원을 관리하는 데 필요한 기능을 제공\n고성능 인프라의 가능한 자원의 상태를 모니터링 및 관리 가능",
    "3.1 병렬 라이브러리 구축\n3.1.2. 병렬 라이브러리 구축 완료\nOpenPBS (Open Portable Batch System)\nHook 을 활용한 작업 상태 기능 구현 완료\nqmgr -c 'import hook end_hook applicationx-python default ..srcend_hook.py\nqmgr -c 'import hook execjob_begin_hook applicationx-python default ..srcexecjob_begin.py\nqmgr -c 'import hook movejob_hook applicationx-python default ..srcmovejob.py\nqmgr -c 'import hook queuejob_hook applicationx-python default ..srcqueuejob_hook.py\nqmgr -c 'import hook runjob_hook applicationx-python default ..srcrunjob.py'\nOpenPBS HOOK 등록 커멘드\nSeegene github 저장소: HOOK 등록 스크립트\nSeegene github 저장소: Hook 동작 코드",
    "3.1 병렬 라이브러리 구축\n3.1.2. 병렬 라이브러리 구축 완료\nOpenMPI (Open Message Passing Interface)\n병렬 컴퓨팅을 위한 오픈 소스 소프트웨어 라이브러리 구축 완료\n병렬 프로그래밍 지원\n고성능 인프라의 노드 간에 데이터를 교환하고 작업을 분산하여 병렬 애플리케이션을 개발할 수 있음\n고성능 \n고성능 컴퓨팅 시스템에서 사용하기 위해 설계되었음\n다양한 병렬 애플리케이션에서 효율적으로 동작\n다양한 플랫폼 지원\n다양한 운영 체제와 하드웨어 플랫폼을 지원하여, 유연한 환경에서 병렬 컴퓨팅을 구현할 수 있음",
    "3.1 병렬 라이브러리 구축\n3.1.2. 병렬 라이브러리 구축 완료\nOpenMPI (Open Message Passing Interface)",
    "3.1 병렬 라이브러리 구축\n3.1.3. 분산 응용 제어 미들웨어 구현 완료\n작업 제출, 삭제 기능\n작업 상태 관리 기능\n배치 파일 생성 기능",
    "작업 상태 확인\nOpenPBS 배치 스크립트 생성\nOlafmgmt00 미들웨어 상태 화면 \n미들웨어 CD 등록",
    "3.1 병렬 라이브러리 구축\n3.1.3. 분산 응용 제어 미들웨어 구현 완료\n작업 명세 분석 기능 완료\n프런트에서 보내오는 명세를 해석\n작업 상태 정의\nJSON 명세 정의",
    "3.1 병렬 라이브러리 구축\n3.1.3. 분산 응용 제어 미들웨어 구현 완료\n미들웨어를 통한 클러스터 및 고성능 인프라 메시지 인터페이스 기능 완료",
    "미들웨어에서 클러스터로 보낸 메시지 확인 (KafkaUI)\nhttps:dev-kafka.seegene.comuiclusterslocalall-topicsJob_control",
    "3.1 병렬 라이브러리 구축\n3.1.3 분산 응용 제어 미들웨어 구현 완료\n분산 응용의 작업 이력 관리\n분산 응용의 로그 데이터 관리",
    "https:rancher.seegene.comdashboardcc-m-7vfwx4xhexplorerservicewisdombackendpods\n병렬분산처리 라이브러 시스템\n병렬분산처리 라이브러리\n클러스터 시스템\n병렬 라이브러리 구축\n고성능 컴퓨터 병렬응용 작업 수행 인터페이스 구축\n분산 응용 소스 버전관리\n분산 응용 이미지 버전관리\n분산응용 개발환경\n분산 응용 디버깅 및 개발 인터페이스 구축\n분산 응용 상태 관리\nJobmanager\n클러스터 시스템 구성도",
    "3.2 클러스터 시스템 구축\n3.2.2 분산 응용 이미지 버전 관리 구축 완료\n이미지 버전 관리를 기반으로 CI  CD 가능\n각 이미지에 TAG를 기반으로 버전 관리 가능\nhttps:dev-dockerui.seegene.com\nhttps:dev-frontapi.seegene.com\n개발자 페이지\nDocker Registry",
    "3.2 클러스터 시스템 구축\n3.2.3. 분산 응용 디버깅 환경 구축 완료\n필터링, 집계를 활용하여 문제를 확인 가능\nKafka와 연동하여 메시지를 수집 및 인덱싱 가능\nKafka 커넥터 및 Logstash를 사용하여 데이터 수집 가능",
    "https:dev-elk.seegene.com\nhttps:rancher.seegene.com",
    "3.2 클러스터 시스템 구축\n3.2.4. 사용자 관리 구현 완료\n사용자, 그룹 및 권한 생성 가능\n사용자 인증 및 권한 부여 가능",
    "https:dev-ldap.seegene.com\nhttps:dev-frontapi.seegene.com\n사용자 로그인 확인\n사용자 관리 페이지",
    "3.2 클러스터 시스템 구축\n3.2.5. 작업 상태 및 정보 데이터 베이스 구축 완료\n작업 상태 저장 \n명세 정보 저장\nhttps:dev-elk.seegene.com\nhttps:rancher.seegene.comdashboardcc-m-7vfwx4xhexplorerapps.statefulset\n데이터 베이스 서비스 로그 확인\n데이터베이스 서비스 확인",
    "3.3 분산 응용 개발 환경 구축\n3.3.1. 분산 응용 개발 환경 시스템 구성도\n병렬분산처리 라이브러 시스템\n병렬분산처리 라이브러리\n클러스터 시스템\n병렬 라이브러리 구축\n고성능 컴퓨터 병렬응용 작업 수행 인터페이스 구축\n분산 응용 소스 버전관리\n분산 응용 이미지 버전관리\n분산응용 개발환경\n분산 응용 디버깅 및 개발 인터페이스 구축\n분산 응용 상태 관리\nJobmanager\n분산 응용 개발환경 시스템 구성도",
    "3.3 분산 응용 개발 환경 구축\n3.3.2 고성능 컴퓨팅 시스템 제어를 위한 백엔드 API 서버 구축 완료",
    "https:rancher.seegene.comdashboardcc-m-7vfwx4xhexplorerservicewisdombackendpods",
    "3.3 분산 응용 개발 환경 구축\n3.3.2 고성능 컴퓨팅 시스템 제어를 위한 백엔드 API 서버 구축 완료\nAPI 서비스 Document",
    "3.3 분산 응용 개발 환경 구축\n3.3.3 분산 응용 디버깅 메시지 인터페이스 미들웨어 구현 완료\nJSON 명세 해석 기능\nKafka를 통한 메시지 교환 기능\n분산 응용의 로그 데이터 관리 기능\n클러스터간 인터페이스 기능\nhttps:github.comseegenelabinsilico-devopstreefeatureseegene-jobmanagerhpcjobjobmanager_buildapp-go-jobmanagerappssrcapp-go-job-manager\nSeegene github 저장소 : 미들웨어 코드\nOlafmgmt00 미들웨어 상태 화면",
    "3.3 분산 응용 개발 환경 구축\n3.3.4. 분산 응용 개발자 페이지 구현 완료\n분산 응용의 로그와 오류를 실시간으로 모니터링 가능\n분산 응용에 필요한 CPU, MEM을 할당 가능\n사용자별 자원 관리 가능",
    "https:dev-frontapi.seegene.com\n병렬 분산처리 시스템 라이브러리 구축 \n데모 시나리오  모듈 개발 워크 플로우\n데모 시나리오\n 모듈 개발 워크 플로우\nGITLAB에 저장되어 있는 소스를 개발 머신으로 다운로드 한다.\n개발하는 브런치(Branch)로 이동한다.\n개발한 코드를 GITLAB 저장소에 업데이트(push) 한다.\nCI 가 GITLAB 저장소에 업데이트된 코드를 반영하여 도커 이미지를 생성한 후 저장소에 업데이트 된다.\n모듈 개발 페이지로 이동한다.\n 버튼으로 작업을 등록 후 작업을 선택하여 실행 한다.\n실행한 분석 응용의 현황 및 로그 메시지를 확인한다.",
    "데모 시나리오\nGITLAB에 저장되어 있는 소스를 개발 머신으로 다운로드 한다.\ngit clone http:dev-git.seegene.comwsbangsct-docker.git",
    "https:dev-git.seegene.comwsbangsct-docker\nGITLAB 저장소",
    "데모 시나리오\n2. 개발하는 feature브런치(Branch)로 이동한다.\ngit checkout featuretest \nCI 에서 feature 브렌치에 업데이트(push)를 기다림",
    "Jenkins Pipeline 설정\nhttps:dev-jenkins.seegene.comjobsctjobsct-docker-ci-devconfigure",
    "데모 시나리오\n3. 개발한 코드를 GITLAB 저장소에 업데이트(push) 한다.\nGITLAB 저장소에 업데이트(push)",
    "데모 시나리오\n4. CI 가 GITLAB 저장소에 업데이트된 코드를 반영하여 도커 이미지를 생성한 후 저장소에 업데이트 된다.\nJenkins 에서 도커 이미지 생성 후 도커 레지스트리로 업데이트\n도커 이미지 업데이트\n도커 이미지 빌드",
    "데모 시나리오\n4. CI 가 GITLAB 저장소에 업데이트된 코드를 반영하여 도커 이미지를 생성한 후 저장소에 업데이트 된다.\nhttps:dev-jenkins.seegene.comblueorganizationsjenkinssct2Fsct-docker-ci-devdetailsct-docker-ci-dev9pipeline",
    "데모 시나리오\n5. 모듈 개발 페이지로 이동 및 로그인 한다.\nhttps:dev-frontapi.seegene.com",
    "데모 시나리오\n6.  버튼으로 작업을 등록 후 작업을 선택하여 실행 한다.\n①\n②\n③\n④\n⑤\n⑥",
    "데모 시나리오\n7. 실행한 분석 응용의 현황 및 로그 메시지를 확인한다.\n분석응용 로그 메시지\n분석 응용 상태"
  ],
  "metadata": {
    "original_filename": "병렬분산처리시스템_데모시나리오(24-03-07).txt",
    "text_hash": "3bd68f90f951",
    "text_length": 6151,
    "created_at": "",
    "tags": [],
    "origin": "사내 문서"
  },
  "split_info": {
    "chunk_size": null,
    "stride": null,
    "min_length": 50,
    "total_chunks": 39
  }
}